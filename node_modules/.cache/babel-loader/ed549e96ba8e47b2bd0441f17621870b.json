{"ast":null,"code":"import _get from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\n\nexport var protocol = 5;\nexport var PacketType;\n\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\r\n * A socket.io Encoder instance\r\n */\n\n\nexport var Encoder = /*#__PURE__*/function () {\n  function Encoder() {\n    _classCallCheck(this, Encoder);\n  }\n\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value:\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\n    function encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (hasBinary(obj)) {\n          obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n          return this.encodeAsBinary(obj);\n        }\n      }\n\n      return [this.encodeAsString(obj)];\n    }\n    /**\r\n     * Encode packet as string.\r\n     */\n\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type; // attachments if we have them\n\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      } // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n\n\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      } // immediately followed by the id\n\n\n      if (null != obj.id) {\n        str += obj.id;\n      } // json data\n\n\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data);\n      }\n\n      return str;\n    }\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\n\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n\n      return buffers; // write all the buffers\n    }\n  }]);\n\n  return Encoder;\n}();\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\n\nexport var Decoder = /*#__PURE__*/function (_Emitter) {\n  _inherits(Decoder, _Emitter);\n\n  var _super = _createSuper(Decoder);\n\n  function Decoder() {\n    _classCallCheck(this, Decoder);\n\n    return _super.call(this);\n  }\n  /**\r\n   * Decodes an encoded packet string into packet JSON.\r\n   *\r\n   * @param {String} obj - encoded packet\r\n   */\n\n\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n\n      if (typeof obj === \"string\") {\n        packet = this.decodeString(obj);\n\n        if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n        }\n      } else if (isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\n\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0; // look up type\n\n      var p = {\n        type: Number(str.charAt(0))\n      };\n\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      } // look up attachments if type binary\n\n\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n        var buf = str.substring(start, i);\n\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n\n        p.attachments = Number(buf);\n      } // look up namespace (if any)\n\n\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      } // look up id\n\n\n      var next = str.charAt(i + 1);\n\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n\n        while (++i) {\n          var _c = str.charAt(i);\n\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n\n          if (i === str.length) break;\n        }\n\n        p.id = Number(str.substring(_start2, i + 1));\n      } // look up json data\n\n\n      if (str.charAt(++i)) {\n        var payload = tryParse(str.substr(i));\n\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n\n      return p;\n    }\n  }, {\n    key: \"destroy\",\n    value:\n    /**\r\n     * Deallocates a parser's resources\r\n     */\n    function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return typeof payload === \"object\";\n\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || typeof payload === \"object\";\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && payload.length > 0;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n\n  return Decoder;\n}(Emitter);\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\n\n\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\r\n   * Method to be called when binary data received from connection\r\n   * after a BINARY_EVENT packet.\r\n   *\r\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n   * @return {null | Object} returns null if more binary data is expected or\r\n   *   a reconstructed packet object if all buffers have been received.\r\n   */\n\n\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n\n      return null;\n    }\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\n\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n\n  return BinaryReconstructor;\n}();","map":{"version":3,"sources":["C:/Users/bmmul/IdeaProjects/regexame/node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js"],"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","protocol","PacketType","Encoder","obj","type","EVENT","ACK","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","pack","packet","buffers","unshift","Decoder","decodeString","reconstructor","BinaryReconstructor","base64","Error","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","parse","e","reconPack","binData","push"],"mappings":"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","sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\r\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\r\nimport { isBinary, hasBinary } from \"./is-binary.js\";\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport const protocol = 5;\r\nexport var PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType || (PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nexport class Encoder {\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (hasBinary(obj)) {\r\n                obj.type =\r\n                    obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK;\r\n                return this.encodeAsBinary(obj);\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data);\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nexport class Decoder extends Emitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            packet = this.decodeString(obj);\r\n            if (packet.type === PacketType.BINARY_EVENT ||\r\n                packet.type === PacketType.BINARY_ACK) {\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n        }\r\n    }\r\n}\r\nfunction tryParse(str) {\r\n    try {\r\n        return JSON.parse(str);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}