{"ast":null,"code":"import _classCallCheck from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/bmmul/IdeaProjects/regexame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Transport } from \"../transport.js\";\nimport parseqs from \"parseqs\";\nimport yeast from \"yeast\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\"; // detect ReactNative environment\n\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nexport var WS = /*#__PURE__*/function (_Transport) {\n  _inherits(WS, _Transport);\n\n  var _super = _createSuper(WS);\n\n  /**\r\n   * WebSocket transport constructor.\r\n   *\r\n   * @api {Object} connection options\r\n   * @api public\r\n   */\n  function WS(opts) {\n    var _this;\n\n    _classCallCheck(this, WS);\n\n    _this = _super.call(this, opts);\n    _this.supportsBinary = !opts.forceBase64;\n    return _this;\n  }\n  /**\r\n   * Transport name.\r\n   *\r\n   * @api public\r\n   */\n\n\n  _createClass(WS, [{\n    key: \"name\",\n    get: function get() {\n      return \"websocket\";\n    }\n    /**\r\n     * Opens socket.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      if (!this.check()) {\n        // let probe timeout\n        return;\n      }\n\n      var uri = this.uri();\n      var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n\n      try {\n        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emit(\"error\", err);\n      }\n\n      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n      this.addEventListeners();\n    }\n    /**\r\n     * Adds event listeners to the socket\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var _this2 = this;\n\n      this.ws.onopen = function () {\n        if (_this2.opts.autoUnref) {\n          _this2.ws._socket.unref();\n        }\n\n        _this2.onOpen();\n      };\n\n      this.ws.onclose = this.onClose.bind(this);\n\n      this.ws.onmessage = function (ev) {\n        return _this2.onData(ev.data);\n      };\n\n      this.ws.onerror = function (e) {\n        return _this2.onError(\"websocket error\", e);\n      };\n    }\n    /**\r\n     * Writes data to socket.\r\n     *\r\n     * @param {Array} array of packets.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this3 = this;\n\n      this.writable = false; // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n\n      var _loop = function _loop(i) {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        encodePacket(packet, _this3.supportsBinary, function (data) {\n          // always create a new object (GH-437)\n          var opts = {};\n\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n\n            if (_this3.opts.perMessageDeflate) {\n              var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n              if (len < _this3.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          } // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n\n\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              _this3.ws.send(data);\n            } else {\n              _this3.ws.send(data, opts);\n            }\n          } catch (e) {}\n\n          if (lastPacket) {\n            // fake drain\n            // defer to next tick to allow Socket to clear writeBuffer\n            nextTick(function () {\n              _this3.writable = true;\n\n              _this3.emit(\"drain\");\n            }, _this3.setTimeoutFn);\n          }\n        });\n      };\n\n      for (var i = 0; i < packets.length; i++) {\n        _loop(i);\n      }\n    }\n    /**\r\n     * Closes socket.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.close();\n        this.ws = null;\n      }\n    }\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var port = \"\"; // avoid port if default for schema\n\n      if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      } // append timestamp to URI\n\n\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      } // communicate binary support capabilities\n\n\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n\n      var encodedQuery = parseqs.encode(query);\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n    }\n    /**\r\n     * Feature detection for WebSocket.\r\n     *\r\n     * @return {Boolean} whether this transport is available.\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"check\",\n    value: function check() {\n      return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n    }\n  }]);\n\n  return WS;\n}(Transport);","map":{"version":3,"sources":["C:/Users/bmmul/IdeaProjects/regexame/node_modules/engine.io-client/build/esm/transports/websocket.js"],"names":["Transport","parseqs","yeast","pick","defaultBinaryType","nextTick","usingBrowserWebSocket","WebSocket","encodePacket","isReactNative","navigator","product","toLowerCase","WS","opts","supportsBinary","forceBase64","check","uri","protocols","extraHeaders","headers","ws","err","emit","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","onClose","bind","onmessage","ev","onData","data","onerror","e","onError","packets","writable","i","packet","lastPacket","length","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","setTimeoutFn","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encodedQuery","encode","ipv6","hostname","indexOf","path","name","prototype"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\r\nimport parseqs from \"parseqs\";\r\nimport yeast from \"yeast\";\r\nimport { pick } from \"../util.js\";\r\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\r\nimport { encodePacket } from \"engine.io-parser\";\r\n// detect ReactNative environment\r\nconst isReactNative = typeof navigator !== \"undefined\" &&\r\n    typeof navigator.product === \"string\" &&\r\n    navigator.product.toLowerCase() === \"reactnative\";\r\nexport class WS extends Transport {\r\n    /**\r\n     * WebSocket transport constructor.\r\n     *\r\n     * @api {Object} connection options\r\n     * @api public\r\n     */\r\n    constructor(opts) {\r\n        super(opts);\r\n        this.supportsBinary = !opts.forceBase64;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     *\r\n     * @api public\r\n     */\r\n    get name() {\r\n        return \"websocket\";\r\n    }\r\n    /**\r\n     * Opens socket.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        if (!this.check()) {\r\n            // let probe timeout\r\n            return;\r\n        }\r\n        const uri = this.uri();\r\n        const protocols = this.opts.protocols;\r\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\r\n        const opts = isReactNative\r\n            ? {}\r\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\r\n        if (this.opts.extraHeaders) {\r\n            opts.headers = this.opts.extraHeaders;\r\n        }\r\n        try {\r\n            this.ws =\r\n                usingBrowserWebSocket && !isReactNative\r\n                    ? protocols\r\n                        ? new WebSocket(uri, protocols)\r\n                        : new WebSocket(uri)\r\n                    : new WebSocket(uri, protocols, opts);\r\n        }\r\n        catch (err) {\r\n            return this.emit(\"error\", err);\r\n        }\r\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\r\n        this.addEventListeners();\r\n    }\r\n    /**\r\n     * Adds event listeners to the socket\r\n     *\r\n     * @api private\r\n     */\r\n    addEventListeners() {\r\n        this.ws.onopen = () => {\r\n            if (this.opts.autoUnref) {\r\n                this.ws._socket.unref();\r\n            }\r\n            this.onOpen();\r\n        };\r\n        this.ws.onclose = this.onClose.bind(this);\r\n        this.ws.onmessage = ev => this.onData(ev.data);\r\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\r\n    }\r\n    /**\r\n     * Writes data to socket.\r\n     *\r\n     * @param {Array} array of packets.\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        // encodePacket efficient as it uses WS framing\r\n        // no need for encodePayload\r\n        for (let i = 0; i < packets.length; i++) {\r\n            const packet = packets[i];\r\n            const lastPacket = i === packets.length - 1;\r\n            encodePacket(packet, this.supportsBinary, data => {\r\n                // always create a new object (GH-437)\r\n                const opts = {};\r\n                if (!usingBrowserWebSocket) {\r\n                    if (packet.options) {\r\n                        opts.compress = packet.options.compress;\r\n                    }\r\n                    if (this.opts.perMessageDeflate) {\r\n                        const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\r\n                        if (len < this.opts.perMessageDeflate.threshold) {\r\n                            opts.compress = false;\r\n                        }\r\n                    }\r\n                }\r\n                // Sometimes the websocket has already been closed but the browser didn't\r\n                // have a chance of informing us about it yet, in that case send will\r\n                // throw an error\r\n                try {\r\n                    if (usingBrowserWebSocket) {\r\n                        // TypeError is thrown when passing the second argument on Safari\r\n                        this.ws.send(data);\r\n                    }\r\n                    else {\r\n                        this.ws.send(data, opts);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                }\r\n                if (lastPacket) {\r\n                    // fake drain\r\n                    // defer to next tick to allow Socket to clear writeBuffer\r\n                    nextTick(() => {\r\n                        this.writable = true;\r\n                        this.emit(\"drain\");\r\n                    }, this.setTimeoutFn);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Closes socket.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        if (typeof this.ws !== \"undefined\") {\r\n            this.ws.close();\r\n            this.ws = null;\r\n        }\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\r\n        let port = \"\";\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        // append timestamp to URI\r\n        if (this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = yeast();\r\n        }\r\n        // communicate binary support capabilities\r\n        if (!this.supportsBinary) {\r\n            query.b64 = 1;\r\n        }\r\n        const encodedQuery = parseqs.encode(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n    /**\r\n     * Feature detection for WebSocket.\r\n     *\r\n     * @return {Boolean} whether this transport is available.\r\n     * @api public\r\n     */\r\n    check() {\r\n        return (!!WebSocket &&\r\n            !(\"__initialize\" in WebSocket && this.name === WS.prototype.name));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}